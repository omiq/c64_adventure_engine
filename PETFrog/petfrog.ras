program PETFrog;
var  
		oldti,ti: byte at $8f;			// Jiffy timer ($0200- $0202 on older??)

       	i,c: 	integer = 0; 
       	ch : 		byte = 0;
 

		rom4: 	cstring ="4.0 rom";
		rom2: 	cstring ="2.0 rom";
		arrp:	pointer;	

const	KEYB: 	address = 151;	// Keys being pressed
const	KEYBUF:	address = 158;	// Keyboard buffer
//KEYD        0270-027A        624-633        Keyboard Buffer Queue (FIFO) $026f-$0278 on newer

KEYPRESS: byte = $FF;
		  				// 123456789012345678901234567890
		blk: 	cstring = "                            ";  
		by : 	cstring = " BY CHRIS GARRETT 01/2021   ";    
		url: 	cstring = " @MAKERHACKS MAKERHACKS.COM "; 
		over: 	cstring = " GAME OVER                  ";    
		score: 	cstring = " YOU SCORED:                "; 
		space: 	cstring = " PRESS SPACE TO CONTINUE    "; 
		
		ALIVE:byte=1;
		WON_GAME:byte=0;   

/*

  
*/
frogcharA: byte = 214;
frogcharB: byte = 86;
frog_x,frog_old_x: byte = 20;
frog_y,frog_old_y: byte = 24;
previous_tile: byte =32;
player_lives: byte=0;
player_score: integer=0;

arr_crockr: array[9] of byte = ( 192,162,220,220,220,220,220, 98,121,);
str_crockr: cstring = "         ";

arr_crockl: array[9] of byte = ( 121, 98,220,220,220,220,220,162,192,);
str_crockl: cstring = "         ";

arr_logl: array[5] of byte = ( 168,168,168,168,209,);
str_logl: cstring = "         ";

arr_logr: array[5] of byte = ( 209,169,169,169, 169,);
str_logr: cstring = "         ";

arr_carl: array[4] of byte = ( 240,207,208,224,);
str_cart: cstring = "         ";
arr_carr: array[4] of byte = ( 237,215,215,160,);
str_carb: cstring = "         ";

arr_truckb_l: array[8] of byte = ( $F0,$F3,$FC,$60,$60,$60,);
str_truckb_l: cstring = "         ";
arr_truckt_l: array[8] of byte = ( $ED,$D7,$F1,$D7,$62,$D7,);
str_truckt_l: cstring = "         ";


arr_truckb_r: array[8] of byte = ( 160,215, 98,215,241,215,253,160,);
str_truckb_r: cstring = "         ";
arr_truckt_r: array[8] of byte = ( 224, 96, 96, 96,254,235,238,224,);
str_truckt_r: cstring = "         ";


 
// WHERE ROWS START AND END                        
obstacles_y: array[12] of byte = ( 4, 5, 6, 7, 12, 13, 15, 16, 18, 19, 21, 22);
strip_direction: array[12] of byte = ( 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0);

level_strips: array[2000] of byte = (
);

obstacles_x_rl,obstacles_x_lr: byte;
blank_river: cstring = "                           ";
blank_road: array[12] of byte = (160,160,160,160,160,160,160,160,160,160,160,160);

logo: array[52] of byte = (
//  1    2   3  4   5   6   7   8   9  10  11  12  13
	114, 73,112,110,112,114,110, 85, 73, 32, 32, 32, 32, 
	107, 75,107, 32, 32, 66, 32,107, 85, 85, 73, 85, 73, 
	113, 32,109,125, 32,113, 32, 75,113, 74, 75, 74, 66, 
	120,120,120,120,120,120,120,120,120,120,120, 74, 75, 
);
 
title_screen_frog_pointer: pointer;
title_screen_frog: array[1000] of byte = (
$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$6C,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$7B,$20,
$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$6C,$A0,$A0,$A0,$A0,$A0,$7B,$20,$20,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$20,
$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$F5,$A0,$A0,$A0,$A0,$A0,$A0,$20,$20,$A0,$A0,$A0,$A0,$7E,$20,$20,$7C,$A0,$A0,$A0,$20,
$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$A0,$7E,$E2,$E2,$E2,$7C,$A0,$61,$20,$A0,$A0,$A0,$7E,$20,$20,$20,$20,$E1,$A0,$A0,$20,
$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$76,$A0,$20,$20,$20,$20,$20,$A0,$61,$20,$A0,$A0,$A0,$20,$20,$20,$20,$20,$20,$A0,$A0,$20,
$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$76,$A0,$20,$20,$20,$20,$20,$A0,$A0,$A0,$A0,$A0,$A0,$20,$20,$20,$20,$20,$20,$A0,$A0,$20,
$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$A0,$7B,$20,$20,$20,$6C,$A0,$A0,$A0,$A0,$A0,$A0,$20,$62,$A0,$A0,$62,$20,$A0,$A0,$20,
$20,$20,$20,$20,$20,$20,$20,$68,$66,$20,$20,$20,$20,$20,$20,$20,$20,$62,$A0,$A0,$A0,$62,$62,$62,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$EC,$62,$62,$FB,$A0,$A0,$A0,$20,
$20,$68,$20,$20,$20,$20,$20,$66,$66,$5C,$20,$20,$20,$20,$20,$20,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$7E,$20,
$20,$66,$5C,$20,$20,$20,$20,$66,$66,$5C,$20,$20,$20,$20,$20,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$7B,$20,
$20,$20,$20,$20,$20,$20,$20,$20,$66,$20,$20,$20,$20,$20,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$20,
$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$A0,$EC,$FB,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$7B,
$66,$20,$20,$66,$20,$20,$20,$20,$68,$66,$20,$20,$20,$E1,$A0,$6C,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,
$66,$68,$20,$66,$66,$20,$20,$66,$66,$66,$5C,$20,$20,$A0,$A0,$A0,$20,$FB,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$EC,$20,$A0,
$66,$66,$20,$20,$66,$20,$20,$66,$66,$66,$66,$5C,$20,$A0,$A0,$A0,$7B,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$6C,$A0,
$66,$66,$66,$20,$66,$66,$20,$66,$66,$20,$66,$5C,$20,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$62,$62,$62,$62,$62,$62,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$FE,$A0,$A0,
$66,$66,$66,$66,$20,$66,$66,$20,$66,$66,$66,$5C,$20,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$E2,$E2,$E2,$E2,$E2,$E2,$A0,$A0,$A0,$A0,
$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$20,$20,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$EC,$E2,$E2,$EC,$A0,$A0,$A0,$A0,$A0,
$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$20,$E1,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$EC,
$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$20,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$20,
$66,$66,$5C,$20,$66,$66,$66,$66,$20,$20,$66,$66,$66,$66,$20,$20,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$61,$68,
$66,$66,$20,$20,$20,$66,$66,$5C,$20,$20,$66,$66,$66,$66,$66,$20,$20,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$EC,$20,$66,
$66,$5C,$20,$20,$20,$66,$66,$20,$20,$20,$20,$66,$66,$66,$66,$66,$20,$20,$E2,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$EC,$20,$66,$66,
$66,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$66,$66,$66,$20,$20,$20,$E2,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$EC,$20,$20,$66,$66,$66,
$66,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$66,$66,$66,$66,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$66,$66,$66,$66,$66
);




petscii_pointer: pointer;

/*
1   2   3   4   5   6   7   8   9   0   1   2   3   4   5   6   7   8   9   20  1   2   3   4   5   6   7   8   9   30  1   2   3   4   5   6   7   8   9   40   
*/
level1: array[1000] of byte = (
$CF,$F7,$F7,$F7,$F7,$F7,$F7,$F7,$F7,$F7,$F7,$F7,$F7,$F7,$F7,$F7,$F7,$F7,$F7,$F7,$F7,$F7,$F7,$F7,$F7,$F7,$F7,$F7,$F7,$F7,$F7,$F7,$F7,$F7,$F7,$F7,$F7,$F7,$F7,$D0,
$F4,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$90,$85,$94,$86,$92,$8F,$87,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$EA,
$F4,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$EA,
$CC,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$FA,
$E6,$E6,$E6,$20,$E6,$E6,$E6,$E6,$E6,$E6,$20,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$20,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$20,$E6,$E6,$E6,$E6,$E6,$20,$E6,$E6,
$E6,$E6,$20,$20,$20,$20,$E6,$E6,$E6,$20,$20,$20,$20,$E6,$E6,$E6,$20,$20,$20,$20,$E6,$E6,$E6,$20,$20,$20,$20,$E6,$E6,$20,$20,$20,$20,$E6,$E6,$20,$20,$20,$20,$E6,
$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$C0,$A2,$DC,$DC,$DC,$DC,$DC,$62,$79,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
$20,$20,$20,$20,$20,$A8,$A8,$A8,$A8,$A8,$A8,$D1,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$79,$62,$DC,$DC,$DC,$DC,$DC,$A2,$C0,$20,$20,$20,$20,$20,$20,$20,$20,
$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$D1,$A9,$A9,$A9,$A9,$20,$20,$20,$56,$20,$20,$20,$20,$20,$20,$20,$20,$D1,$A9,$A9,$A9,$A9,$20,$20,$20,
$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
$68,$68,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$68,$68,$68,$68,$68,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$68,$68,$68,$20,$20,$20,$20,$20,$20,
$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$68,
$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,
$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,
$E0,$E0,$E0,$E0,$E0,$E0,$E0,$E0,$E0,$E0,$E0,$F0,$CF,$D0,$E0,$E0,$E0,$E0,$E0,$E0,$E0,$E0,$F0,$CF,$D0,$E0,$E0,$E0,$E0,$F0,$CF,$D0,$E0,$E0,$E0,$E0,$E0,$E0,$E0,$E0,
$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$ED,$D7,$D7,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$ED,$D7,$D7,$A0,$A0,$A0,$A0,$ED,$D7,$D7,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,
$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,
$E0,$E0,$E0,$E0,$E0,$E0,$E0,$E0,$E0,$E0,$60,$60,$60,$FE,$EB,$EE,$E0,$E0,$E0,$E0,$E0,$E0,$E0,$E0,$E0,$E0,$E0,$E0,$E0,$E0,$E0,$E0,$E0,$E0,$E0,$E0,$E0,$A0,$A0,$A0,
$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$D7,$62,$D7,$F1,$D7,$FD,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,
$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,
$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,
$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$D6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6
);
	

level2: array[1000] of byte = (
$CC,$EF,$FA,$13,$03,$0F,$12,$05,$3A,$39,$39,$39,$CC,$EF,$EF,$EF,$A0,$90,$85,$94,$86,$92,$8F,$87,$A0,$EF,$EF,$EF,$EF,$FA,$0C,$09,$16,$05,$13,$3A,$33,$CC,$EF,$FA,
$20,$68,$68,$20,$68,$68,$68,$68,$68,$68,$20,$68,$68,$68,$68,$68,$68,$68,$20,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$20,$68,$68,$68,$68,$68,$20,$68,$20,
$66,$5C,$20,$20,$20,$20,$66,$66,$20,$20,$20,$20,$20,$66,$66,$20,$20,$20,$20,$20,$66,$66,$66,$20,$20,$20,$20,$66,$66,$20,$20,$20,$20,$66,$66,$20,$20,$20,$20,$5C,
$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
$66,$68,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$68,$68,$68,$68,$68,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$68,$68,$68,$20,$20,$20,$20,$68,$66,
$C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3,
$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,
$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,
$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,
$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,
$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,
$C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3,$C3,
$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,
$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,
$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,
$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,
$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,
$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,
$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66
);


		
/* =============================================================================================== */


procedure cls();
var

begin
	ClearScreen($20, screen_char_loc);
	moveto(0,0,hi(screen_char_loc));
end;


function getkey() : byte;

begin

 	getkey:=peek(KEYB,0);

end;


procedure waitkey();
var
		this_key: byte =$FF;
begin

	while(this_key<>$20) do
	begin
		this_key:=getkey();
	end;
end;

function getat(sx: byte; sy: byte;) : byte;
var 
	szp : pointer;

begin
	szp:= $8000 + sy*40 + sx;
	getat:=szp[0]; 
end;

procedure textat(x: byte; y: byte; this_str: pointer; str_len: byte );
var 
	zp : pointer;

begin
	zp:= $8000 + y*40 + x;
	MemCpyFast( this_str, 0, zp, str_len ); 
end;


procedure numberat(num_x: byte; num_y: byte; num: integer; num_len: byte );
var 
	num_p : pointer;
	num_str: cstring = "00000";

begin

	if(num>=10) then
	begin
		
		// Put each digit as PETSCII into the string
 		poke(#num_str,2,(mod(num,10))+48);	
 		poke(#num_str,1,(mod(num/10,10))+48);
		poke(#num_str,0,(num/100)+48);


	end
	else
	begin
 		poke(#num_str,0,num+48);
	end;


	num_p:= $8000 + num_y*40 + num_x;
	MemCpy( #num_str, 0, num_p, num_len ); 
end;



procedure title_screen();
begin
	
	// Set up pointer to array:
	title_screen_frog_pointer:=#title_screen_frog;
	
	cls();

	// Draw the frog
	CopyFullScreen(title_screen_frog_pointer, #screenmemory);
	
    MemCpyFast(#logo, 0, ^32768, 13 );  
    MemCpyFast(#logo, 13, ^32808, 13 );  
    MemCpyFast(#logo, 26, ^32848, 13 );  
    MemCpyFast(#logo, 39, ^32888, 13 );  


	while (getkey()<>$20) do
	begin
		textat(2,21,#blk,28);
		textat(2,22, #by,28);	
		textat(2,23,#url,28);	
		textat(2,24,#space,28);
	end;
	
end;

procedure score_screen();
begin
	cls();
	while (getkey()<>$20) do
	begin

	    MemCpyFast(#logo, 0, ^32768, 13 );  
	    MemCpyFast(#logo, 13, ^32808, 13 );  
	    MemCpyFast(#logo, 26, ^32848, 13 );  
	    MemCpyFast(#logo, 39, ^32888, 13 );  

		textat(2,6, #over,28);	
		textat(2,7,#score,28);
		numberat(15,7,player_score,3);	
		textat(2,10,#space,28);
	end;
	
end;

procedure sprite_xy(spr_x: byte; spr_y: byte; source_str: pointer; spr_len: byte );
var 
	spr_p : pointer;

begin
	spr_p:= #level_strips + spr_y*80 + spr_x;
	MemCpyFast( source_str, 0, spr_p, spr_len ); 
	spr_p:= #level_strips + spr_y*80 + spr_x+40;
	MemCpyFast( source_str, 0, spr_p, spr_len ); 
end;

procedure init_vars();
var
	this_row,target_strip:pointer;
	iteration:byte;
	homeplate:byte=211;
begin
	cls();
	
	// Init the playfield
	screenmemory := $8000;
	petscii_pointer:=#level2;
	CopyFullScreen(petscii_pointer, #screenmemory);
	this_row:=petscii_pointer;
	target_strip:=#level_strips;

	// Obstacle Blanks
	fori iteration:= 1 to 25 do
	begin
		// Copy the source twice
		MemCpyFast(this_row, 0, #target_strip, 40);
		target_strip:=target_strip+40;
		MemCpyFast(this_row, 0, #target_strip, 40);
		target_strip:=target_strip+40;
		
		// Next row
		this_row:=this_row+40;
	end;
							

	// Init the "sprites"
	MemCpy(#arr_crockr, 0, #str_crockr, 9 ); 
	MemCpy(#arr_crockl, 0, #str_crockl, 9 ); 
	MemCpy(#arr_logl, 0, #str_logl, 5 ); 
	MemCpy(#arr_logr, 0, #str_logr, 5 ); 
	MemCpy(#arr_truckt_r, 0, #str_truckt_r, 8 ); 
	MemCpy(#arr_truckb_r, 0, #str_truckb_r, 8 ); 
	MemCpy(#arr_carl, 0, #str_cart, 4 ); 
	MemCpy(#arr_carr, 0, #str_carb, 4 ); 

	// Sprite start positions
	sprite_xy(10,obstacles_y[0],#str_crockr,9);
	sprite_xy(30,obstacles_y[1],#str_crockl,9);
	sprite_xy(04,obstacles_y[2],#str_logr,5);
	sprite_xy(24,obstacles_y[3],#str_logl,5);
	sprite_xy(34,obstacles_y[4],#str_cart,4);
	sprite_xy(34,obstacles_y[5],#str_carb,4);
	sprite_xy(19,obstacles_y[6],#str_cart,4);
	sprite_xy(19,obstacles_y[7],#str_carb,4);
	sprite_xy(10,obstacles_y[8],#str_truckt_r,8);
	sprite_xy(10,obstacles_y[9],#str_truckb_r,8);
	sprite_xy(19,obstacles_y[10],#str_truckt_r,8);
	sprite_xy(19,obstacles_y[11],#str_truckb_r,8);


	frog_x:= 20;
	frog_y:= 24;
	
	KEYPRESS := 0;
	ALIVE:=1;
	WON_GAME:=0;
	
	player_lives:=3;
	player_score:=0;
	
	// Home plates
	textat(3,1,#homeplate,1);
	textat(10,1,#homeplate,1);
	textat(18,1,#homeplate,1);
	textat(24,1,#homeplate,1);
	textat(31,1,#homeplate,1);
	textat(37,1,#homeplate,1);
end;

procedure shit_delay();
var 
	temp_delay: byte;
begin
		fori temp_delay := 1 to 3 do
		begin
	        while ( ti = oldti ) do begin end;
	        oldti := ti;
	    end;
end;

procedure show_obstacles();
var
	
	strip_num,this_strip:byte;
	this_source_offset:pointer;
begin

	// TRSE way of incrementing 
	// counter with loop back to 0
	incRange(obstacles_x_rl, 0, 39);
	obstacles_x_lr:=40-obstacles_x_rl;

	for strip_num := 0 to 12 do
	begin
		this_strip:=obstacles_y[strip_num];
		screenmemory:=$8000+(this_strip*40);

		this_source_offset:=#level_strips+(this_strip*80);
		
		if(strip_direction[strip_num]=1) then
		begin
			this_source_offset:=this_source_offset+obstacles_x_rl;
		end
		else
		begin
			this_source_offset:=this_source_offset+obstacles_x_lr;
		end;
		
		MemCpyFast(this_source_offset, 0, screenmemory, 40); 
	end;

	// RESET SCREEN MEMORY
	screenmemory := $8000;

end;

procedure kill_frog();
begin

	frog_x:= 20;
	frog_y:= 24;
    frog_old_x:=frog_x;        
    frog_old_y:=frog_y;	
	dec(player_lives);
end;

procedure check_collisions();
var
	next_tile:byte;
begin
		// CHECK COLLISSIONS
		next_tile := getat(frog_x,frog_y);


		// There is no function to search a string
		// or check an array, or return array size,
		// so we need to check each character individually
		case next_tile of
		// Scenery
	        $66: 
	        	  begin
	        	  	if(frog_y<24) then
	        	  	begin
		             frog_x:=frog_old_x;
		             frog_y:=frog_old_y;
		        end;
	           end;

	        $68: 
	        	  begin
	             frog_x:=frog_old_x;
	             frog_y:=frog_old_y;
	           end;
	           
	        $5c: 
	        	  begin
	             frog_x:=frog_old_x;
	             frog_y:=frog_old_y;
	           end;

		// Truck!
	        $F0: 
	        	  begin
				kill_frog();
	           end;

	        $ED: 
	        	  begin
				kill_frog();

	           end;
	        $EE: 
	        	  begin
				kill_frog();

	           end;

	        $FD: 
	        	  begin
				kill_frog();

	           end;

		// Crock!
			198: 
	        	  begin
				kill_frog();
					
	           end;

			162: 
	        	  begin
				kill_frog();
	           end;

		// HOME
			// Occupied
			214: 
	        	  begin
	             frog_x:=frog_old_x;
	             frog_y:=frog_old_y;
	           end;
			// Success
			211: 
	        	  begin
	        	  	if(frog_x<>frog_old_x or frog_y<>frog_old_y ) then
				begin
					player_score:=player_score+100;
					frog_x:= 20;
					frog_y:= 24;
					frog_old_x:=frog_x;
					frog_old_y:=frog_y;
				end;
	           end;


	    else
	    begin
	       // None of the cases were valid so go ahead
	       if(KEYPRESS<>255) then
			begin
				inc(player_score);
			end;
	    end;
end;



procedure game_loop();

begin
	

	while (ALIVE=1 and WON_GAME=0) do
	begin
		frog_old_x:=frog_x;
		frog_old_y:=frog_y;
		KEYPRESS := getkey();
		
		// Uncomment to show key that was pressed
		// textat(30,20, #KEYPRESS,1);
		
		if(KEYPRESS=184) then
		begin
			if(frog_y>1) then
			begin
				dec(frog_y);
			end;
		end;
		
		if(KEYPRESS=182) then
		begin
			if(frog_x<39) then
			begin
				inc(frog_x);
			end;
		end;
		
		if(KEYPRESS=178 or KEYPRESS=181) then
		begin
			if(frog_y<24) then
			begin
				inc(frog_y);
			end;
		end;

		if(KEYPRESS=180) then
		begin
			if(frog_x>0) then
			begin
				dec(frog_x);
			end;
		end;
		
		// Show the obstacles in new positions
		show_obstacles();
		
		// "Collision detection"
		check_collisions();

		// Still alive?
		if(player_lives<1) then
		begin
			// Dead and didn't win :(
			ALIVE:=0;
				
		end;	



		// only undraw if different
		if(frog_x<>frog_old_x or frog_y<>frog_old_y ) then
		begin
			textat(frog_old_x,frog_old_y, #previous_tile,1);
			previous_tile:=getat(frog_x,frog_y);	
		end;	
		
		// draw the frog because things might have changed onscreen
		if(frog_y>10) then
		begin
			textat(frog_x,frog_y, #frogcharA,1);	
		end
		else
		begin
			textat(frog_x,frog_y, #frogcharB,1);	
		end;


		
		// Score and lives
		numberat(9,0,player_score,3);		
		numberat(36,0,player_lives,1);		

		// Crappy delay
		shit_delay();
	end;

end;

begin
	DefineScreen();	

	while(1) do
	begin
		title_screen();
		init_vars();
		game_loop();
		score_screen();
	end;

	

end.

