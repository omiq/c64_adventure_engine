program ScreenTest;
var  

       	i,c: 	integer = 0; 
       	ch : 		byte = 0;
 

		rom4: 	cstring ="4.0 rom";
		rom2: 	cstring ="2.0 rom";
		arrp:	pointer;	

const	KEYB: 	address = 151;	// Keys being pressed
const	KEYBUF:	address = 158;	// Keyboard buffer

KEYPRESS: byte = $FF;
		  				// 123456789012345678901234567890
		blk: 	cstring = "                            ";  
		by : 	cstring = " BY CHRIS GARRETT 01/2021   ";    
		url: 	cstring = " @MAKERHACKS MAKERHACKS.COM "; 
		over: 	cstring = " GAME OVER                  ";    
		score: 	cstring = " YOU SCORED:                "; 
		space: 	cstring = " PRESS SPACE TO CONTINUE    "; 
		
		ALIVE:byte=1;
		WON_GAME:byte=0;   

/*

  
*/
frogcharA: byte = 214;
frogcharB: byte = 86;
frog_x,frog_old_x: byte = 20;
frog_y,frog_old_y: byte = 25;
previous_tile: byte =32;


arr_crockr: array[9] of byte = ( 192,162,220,220,220,220,220, 98,121,);
str_crockr: cstring = "         ";
arr_crockl: array[9] of byte = ( 121, 98,220,220,220,220,220,162,192,);
str_crockl: cstring = "         ";
arr_logl: array[5] of byte = ( 168,168,168,168,209,);
str_logl: cstring = "         ";
arr_logr: array[5] of byte = ( 209,169,169,169, 169,);
str_logr: cstring = "         ";
arr_carl: array[4] of byte = ( 240,207,208,224,);
str_carl: cstring = "         ";
arr_carr: array[4] of byte = ( 237,215,215,160,);
str_carr: cstring = "         ";
arr_truckb: array[8] of byte = ( 160,215, 98,215,241,215,253,160,);
str_truckb: cstring = "         ";
arr_truckt: array[8] of byte = ( 224, 96, 96, 96,254,235,238,224,);
str_truckt: cstring = "         ";

//                                1   2  3  4  5  6  7  8  9  0  1  2 
obstacles_x: array[12] of byte = (30, 0,30, 0,0,0,30,30,30,30, 0, 0);
obstacles_y: array[12] of byte = ( 4, 5, 7, 8,18,19,21,22,15,16,12,13);

/*
obstacles_x: array[8] of byte = (40, 0,40, 0,40,40, 0, 0);
obstacles_y: array[8] of byte = ( 7, 8, 9,11,17,18,20,21);
*/


crock_a_x: byte;


logo: array[52] of byte = (
//  1    2   3  4   5   6   7   8   9  10  11  12  13
	114, 73,112,110,112,114,110, 85, 73, 32, 32, 32, 32, 
	107, 75,107, 32, 32, 66, 32,107, 85, 85, 73, 85, 73, 
	113, 32,109,125, 32,113, 32, 75,113, 74, 75, 74, 66, 
	120,120,120,120,120,120,120,120,120,120,120, 74, 75, 
);
 
title_screen_frog_pointer: pointer;
title_screen_frog: array[1000] of byte = (
$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$6C,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$7B,$20,
$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$6C,$A0,$A0,$A0,$A0,$A0,$7B,$20,$20,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$20,
$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$F5,$A0,$A0,$A0,$A0,$A0,$A0,$20,$20,$A0,$A0,$A0,$A0,$7E,$20,$20,$7C,$A0,$A0,$A0,$20,
$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$A0,$7E,$E2,$E2,$E2,$7C,$A0,$61,$20,$A0,$A0,$A0,$7E,$20,$20,$20,$20,$E1,$A0,$A0,$20,
$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$76,$A0,$20,$20,$20,$20,$20,$A0,$61,$20,$A0,$A0,$A0,$20,$20,$20,$20,$20,$20,$A0,$A0,$20,
$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$76,$A0,$20,$20,$20,$20,$20,$A0,$A0,$A0,$A0,$A0,$A0,$20,$20,$20,$20,$20,$20,$A0,$A0,$20,
$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$A0,$7B,$20,$20,$20,$6C,$A0,$A0,$A0,$A0,$A0,$A0,$20,$62,$A0,$A0,$62,$20,$A0,$A0,$20,
$20,$20,$20,$20,$20,$20,$20,$68,$66,$20,$20,$20,$20,$20,$20,$20,$20,$62,$A0,$A0,$A0,$62,$62,$62,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$EC,$62,$62,$FB,$A0,$A0,$A0,$20,
$20,$68,$20,$20,$20,$20,$20,$66,$66,$5C,$20,$20,$20,$20,$20,$20,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$7E,$20,
$20,$66,$5C,$20,$20,$20,$20,$66,$66,$5C,$20,$20,$20,$20,$20,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$7B,$20,
$20,$20,$20,$20,$20,$20,$20,$20,$66,$20,$20,$20,$20,$20,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$20,
$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$A0,$EC,$FB,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$7B,
$66,$20,$20,$66,$20,$20,$20,$20,$68,$66,$20,$20,$20,$E1,$A0,$6C,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,
$66,$68,$20,$66,$66,$20,$20,$66,$66,$66,$5C,$20,$20,$A0,$A0,$A0,$20,$FB,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$EC,$20,$A0,
$66,$66,$20,$20,$66,$20,$20,$66,$66,$66,$66,$5C,$20,$A0,$A0,$A0,$7B,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$6C,$A0,
$66,$66,$66,$20,$66,$66,$20,$66,$66,$20,$66,$5C,$20,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$62,$62,$62,$62,$62,$62,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$FE,$A0,$A0,
$66,$66,$66,$66,$20,$66,$66,$20,$66,$66,$66,$5C,$20,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$E2,$E2,$E2,$E2,$E2,$E2,$A0,$A0,$A0,$A0,
$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$20,$20,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$EC,$E2,$E2,$EC,$A0,$A0,$A0,$A0,$A0,
$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$20,$E1,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$EC,
$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$20,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$20,
$66,$66,$5C,$20,$66,$66,$66,$66,$20,$20,$66,$66,$66,$66,$20,$20,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$61,$68,
$66,$66,$20,$20,$20,$66,$66,$5C,$20,$20,$66,$66,$66,$66,$66,$20,$20,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$EC,$20,$66,
$66,$5C,$20,$20,$20,$66,$66,$20,$20,$20,$20,$66,$66,$66,$66,$66,$20,$20,$E2,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$EC,$20,$66,$66,
$66,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$66,$66,$66,$20,$20,$20,$E2,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$EC,$20,$20,$66,$66,$66,
$66,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$66,$66,$66,$66,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$66,$66,$66,$66,$66
);



blank_river: cstring = "                           ";
blank_road: array[12] of byte = (160,160,160,160,160,160,160,160,160);
petscii_pointer: pointer;

/*
1   2   3   4   5   6   7   8   9   0   1   2   3   4   5   6   7   8   9   20  1   2   3   4   5   6   7   8   9   30  1   2   3   4   5   6   7   8   9   40   
*/
level1: array[240] of byte = (
$CF,$F7,$F7,$F7,$F7,$F7,$F7,$F7,$F7,$F7,$F7,$F7,$F7,$F7,$F7,$F7,$F7,$F7,$F7,$F7,$F7,$F7,$F7,$F7,$F7,$F7,$F7,$F7,$F7,$F7,$F7,$F7,$F7,$F7,$F7,$F7,$F7,$F7,$F7,$D0,
$F4,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$90,$85,$94,$86,$92,$8F,$87,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$EA,
$F4,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$EA,
$CC,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$FA,
$E6,$E6,$E6,$20,$E6,$E6,$E6,$E6,$E6,$E6,$20,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$20,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$20,$E6,$E6,$E6,$E6,$E6,$20,$E6,$E6,
$E6,$E6,$20,$20,$20,$20,$E6,$E6,$E6,$20,$20,$20,$20,$E6,$E6,$E6,$20,$20,$20,$20,$E6,$E6,$E6,$20,$20,$20,$20,$E6,$E6,$20,$20,$20,$20,$E6,$E6,$20,$20,$20,$20,$E6,

$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$C0,$A2,$DC,$DC,$DC,$DC,$DC,$62,$79,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
$20,$20,$20,$20,$20,$A8,$A8,$A8,$A8,$A8,$A8,$D1,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$79,$62,$DC,$DC,$DC,$DC,$DC,$A2,$C0,$20,$20,$20,$20,$20,$20,$20,$20,
$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$D1,$A9,$A9,$A9,$A9,$20,$20,$20,$56,$20,$20,$20,$20,$20,$20,$20,$20,$D1,$A9,$A9,$A9,$A9,$20,$20,$20,

$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
$68,$68,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$68,$68,$68,$68,$68,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$68,$68,$68,$20,$20,$20,$20,$20,$20,
$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$68,
$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,
$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,
$E0,$E0,$E0,$E0,$E0,$E0,$E0,$E0,$E0,$E0,$E0,$F0,$CF,$D0,$E0,$E0,$E0,$E0,$E0,$E0,$E0,$E0,$F0,$CF,$D0,$E0,$E0,$E0,$E0,$F0,$CF,$D0,$E0,$E0,$E0,$E0,$E0,$E0,$E0,$E0,

$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$ED,$D7,$D7,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$ED,$D7,$D7,$A0,$A0,$A0,$A0,$ED,$D7,$D7,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,
$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,
$E0,$E0,$E0,$E0,$E0,$E0,$E0,$E0,$E0,$E0,$60,$60,$60,$FE,$EB,$EE,$E0,$E0,$E0,$E0,$E0,$E0,$E0,$E0,$E0,$E0,$E0,$E0,$E0,$E0,$E0,$E0,$E0,$E0,$E0,$E0,$E0,$A0,$A0,$A0,
$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$D7,$62,$D7,$F1,$D7,$FD,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,
$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,
$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,

$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$D6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6,$E6
);
	

level2: array[240] of byte = (
$CC,$EF,$FA,$13,$03,$0F,$12,$05,$3A,$39,$39,$39,$CC,$EF,$EF,$EF,$A0,$90,$85,$94,$86,$92,$8F,$87,$A0,$EF,$EF,$EF,$EF,$FA,$0C,$09,$16,$05,$13,$3A,$33,$CC,$EF,$FA,
$20,$68,$68,$20,$68,$68,$68,$68,$68,$68,$20,$68,$68,$68,$68,$68,$68,$68,$20,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$20,$68,$68,$68,$68,$68,$20,$68,$20,
$66,$5C,$20,$20,$20,$20,$66,$66,$20,$20,$20,$20,$20,$66,$66,$20,$20,$20,$20,$20,$66,$66,$66,$20,$20,$20,$20,$66,$66,$20,$20,$20,$20,$66,$66,$20,$20,$20,$20,$5C,
$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
$66,$68,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$68,$68,$68,$68,$68,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$68,$68,$68,$20,$20,$20,$20,$68,$66,
$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,
$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,
$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,
$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,
$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,
$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,
$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,
$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,
$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,
$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,$AD,
$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,
$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,
$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,
$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66,$66
);


		
/* =============================================================================================== */


procedure cls();
var

begin
	ClearScreen($20, screen_char_loc);
	moveto(0,0,hi(screen_char_loc));
end;


function getkey() : byte;

begin

 	getkey:=peek(KEYB,0);

end;


procedure waitkey();
var
		this_key: byte =$FF;
begin

	while(this_key<>$20) do
	begin
		this_key:=getkey();
	end;
end;

function getat(sx: byte; sy: byte;) : byte;
var 
	szp : pointer;

begin
	szp:= $8000 + sy*40 + sx;
	getat:=szp[0]; 
end;

procedure textat(x: byte; y: byte; this_str: pointer; str_len: byte );
var 
	zp : pointer;

begin
	zp:= $8000 + y*40 + x;
	MemCpyFast( this_str, 0, zp, str_len ); 
end;

procedure title_screen();
begin
	
	// Set up pointer to array:
	title_screen_frog_pointer:=#title_screen_frog;
	
	cls();

	// Draw the frog
	CopyFullScreen(title_screen_frog_pointer, #screenmemory);
	
    MemCpyFast(#logo, 0, ^32768, 13 );  
    MemCpyFast(#logo, 13, ^32808, 13 );  
    MemCpyFast(#logo, 26, ^32848, 13 );  
    MemCpyFast(#logo, 39, ^32888, 13 );  


	while (getkey()<>$20) do
	begin
		textat(2,21,#blk,28);
		textat(2,22, #by,28);	
		textat(2,23,#url,28);	
		textat(2,24,#space,28);
	end;
	
end;

procedure score_screen();
begin
	cls();
	while (getkey()<>$20) do
	begin

	    MemCpyFast(#logo, 0, ^32768, 13 );  
	    MemCpyFast(#logo, 13, ^32808, 13 );  
	    MemCpyFast(#logo, 26, ^32848, 13 );  
	    MemCpyFast(#logo, 39, ^32888, 13 );  

		textat(2,6, #over,28);	
		textat(2,7,#score,28);	
		textat(2,10,#space,28);
	end;
	
end;

procedure all_chars();
begin
	// Second doesn't
	waitkey();
	screen_char_loc:=$8000;
	screenmemory:=$8000;
	cls();

	
	screenmemory:=$8000+40;
	if(peek(^50003,0) = 160) then
	begin
		textat(5,15,#rom4,7);
	end; //4.0 ROMS
	
	if(peek(^50003,0) = 7) then
	begin
		textat(5,15,#rom2,8);
	end; //2.0 ROMS
	


    // Loop through all PETSCII characters
    fori i := 0 to 255 do
    begin
    		// Put the character at screen address
        screen_char_loc[i] := i; 
    end;
    
	textat(0,10,"1234567890123456789012345678901234567890",40);		

	loop();

end;

procedure init_vars();
begin
	cls();
	// Init the playfield
	
	screenmemory := $8000;
	
/*
	MemCpy(#petscii1, 0, screenmemory, 240 ); 
	screenmemory:=$8000+240;
	MemCpy(#petscii2, 0, screenmemory, 240 ); 
	screenmemory:=$8000+480;
	MemCpy(#petscii3, 0, screenmemory, 240 ); 
	screenmemory:=$8000+720;
	MemCpy(#petscii4, 0, screenmemory, 240 ); 
	screenmemory:=$8000+960;
	MemCpy(#petscii5, 0, screenmemory, 40 ); 
	screenmemory := $8000;
*/

	petscii_pointer:=#level2;
	CopyFullScreen(petscii_pointer, #screenmemory);

				
						

	// Init the "sprites"
	MemCpy(#arr_crockr, 0, #str_crockr, 9 ); 
	MemCpy(#arr_crockl, 0, #str_crockl, 9 ); 
	MemCpy(#arr_logl, 0, #str_logl, 5 ); 
	MemCpy(#arr_logr, 0, #str_logr, 5 ); 
	MemCpy(#arr_truckt, 0, #str_truckt, 8 ); 
	MemCpy(#arr_truckb, 0, #str_truckb, 8 ); 
	MemCpy(#arr_carl, 0, #str_carl, 4 ); 
	MemCpy(#arr_carr, 0, #str_carr, 4 ); 

	frog_x:=20;
	frog_y:=10;
	
	KEYPRESS := 0;
	ALIVE:=1;
	WON_GAME:=0;
end;

procedure shit_delay();
begin
		wait($ffffff);
		wait($ffffff);
		wait($ffffff);
		wait($ffffff);
		wait($ffffff);
		wait($ffffff);
		wait($ffffff);
		wait($ffffff);
		wait($ffffff);	
		wait($ffffff);
		wait($ffffff);
		wait($ffffff);
		wait($ffffff);
		wait($ffffff);
		wait($ffffff);
		wait($ffffff);
		wait($ffffff);		
		wait($ffffff);
		wait($ffffff);
		wait($ffffff);
		wait($ffffff);
		wait($ffffff);
		wait($ffffff);
		wait($ffffff);
		wait($ffffff);
end;

procedure game_loop();
begin
	

	while (ALIVE=1 and WON_GAME=0) do
	begin
		frog_old_x:=frog_x;
		frog_old_y:=frog_y;
		KEYPRESS := getkey();
		
		// Uncomment to show key that was pressed
		// textat(30,20, #KEYPRESS,1);
		
		// Undraw "sprites"
		textat(obstacles_x[0],obstacles_y[0], #blank_river,9);  // crock
		textat(obstacles_x[1],obstacles_y[1], #blank_river,9);  // crock	
		textat(obstacles_x[2],obstacles_y[2], #blank_river,5);  // log
		textat(obstacles_x[3],obstacles_y[3], #blank_river,5);	  // log
		textat(obstacles_x[4],obstacles_y[4], #blank_road,4);	  // car	
		textat(obstacles_x[5],obstacles_y[5], #blank_road,4);	  // car
		textat(obstacles_x[6],obstacles_y[6], #blank_road,8);	  // truck
		textat(obstacles_x[7],obstacles_y[7], #blank_road,8);	  // truck
		textat(obstacles_x[8],obstacles_y[8], #blank_road,4);	  // car
		textat(obstacles_x[9],obstacles_y[9], #blank_road,4);	  // car
		textat(obstacles_x[10],obstacles_y[10], #blank_road,8);// truck	
		textat(obstacles_x[11],obstacles_y[11], #blank_road,8);// truck	

		if(KEYPRESS=184) then
		begin
			if(frog_y>1) then
			begin
				dec(frog_y);
			end;
		end;
		
		if(KEYPRESS=182) then
		begin
			if(frog_x<39) then
			begin
				inc(frog_x);
			end;
		end;
		
		if(KEYPRESS=178 or KEYPRESS=181) then
		begin
			if(frog_y<24) then
			begin
				inc(frog_y);
			end;
		end;

		if(KEYPRESS=180) then
		begin
			if(frog_x>0) then
			begin
				dec(frog_x);
			end;
		end;

		// only undraw if different
		if(frog_x<>frog_old_x or frog_y<>frog_old_y ) then
		begin
			textat(frog_old_x,frog_old_y, #previous_tile,1);
			previous_tile:=getat(frog_x,frog_y);	
		end;	
		
		// draw the frog because things might have changed onscreen
		if(frog_y>16) then
		begin
			textat(frog_x,frog_y, #frogcharA,1);	
		end
		else
		begin
			textat(frog_x,frog_y, #frogcharB,1);	
		end;



		// TRSE way of incrementing 
		// counter with loop back to 0
		incRange(crock_a_x, 0, 40);

		// Draw "sprites"	
		textat(obstacles_x[0],obstacles_y[0], #str_crockr,9);
		textat(obstacles_x[1],obstacles_y[1], #str_crockl,9);	
		textat(obstacles_x[2],obstacles_y[2], #str_logr,5);
		textat(obstacles_x[3],obstacles_y[3], #str_logl,5);	
		textat(obstacles_x[4],obstacles_y[4], #arr_carl,4);
		textat(obstacles_x[5],obstacles_y[5], #arr_carr,4);
		textat(obstacles_x[6],obstacles_y[6], #arr_truckt,8);// truck
		textat(obstacles_x[7],obstacles_y[7], #arr_truckb,8);// truck	
		textat(obstacles_x[8],obstacles_y[8], #arr_truckt,8);// truck
		textat(obstacles_x[9],obstacles_y[9], #arr_truckb,8);// truck
		textat(obstacles_x[10],obstacles_y[10], #arr_carl,8);	
		textat(obstacles_x[11],obstacles_y[11], #arr_carr,8);
		
		// Crappy delay
		shit_delay();
	end;

end;

begin
	DefineScreen();	

	while(1) do
	begin
		title_screen();
		init_vars();
		game_loop();
		score_screen();
	end;

	

end.

